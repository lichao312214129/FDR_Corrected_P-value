#!/usr/bin/python3.6

"""
PROGRAM 

Implementing Benjamini-Hochberg's FDR P-value Ajustment for Multiple Testing

WRITTEN BY

M. Joseph Tomlinson

DESCRIPTION

Program implements the p-value adjustment for controlling false discovery rates
outlined in the paper by Benjamini-Hochberg (1995).

NOTES

Code was recently updated (12/23/2018) and produces results similar to the R code
for p-value adjustment using BH technique (see end of code for R code for benchmarking).
Original code had a minor glitch where p-values were not corrected if the following p-value in
the sorted p-value list actually resulted in a lower p-value after correction.

"""


def create_pvalues_fdr_results_dict(pvalues_list):

    '''

    Creates a dictionary inside a list to allow corrected
    FDR pvalues to be stored and also allow for values to changed
    and updated in the inside dictionary

    : parameters pvalues_list: list of input pvalues

    : return pvalues_fdr_results_list: list dictionary where the list
        value is the original p-value

    '''

    # Create list dictionary combo to store results
    pvalues_list_dict = []

    # Start index counter
    x = 0

    # Start looping over pvalues
    for pvalue in pvalues_list:

        # For each entry add a value as an outside list with a dictionary inside
        # Allow sorting of the outside value
        pvalues_list_dict.append([pvalue, {'index_in_list': x,
                                               'original_pvalue': pvalue,
                                               'corrected_pvalue': 'nan'}])
        # Add to the index counter
        x += 1

    return (pvalues_list_dict)



def reorder_sorted_pvalues_list_dict(sorted_pvalues_list_dict):

    """

    Takes in the final list-dictionary with corrected p-values
    and replaces pvalue "list" vlue with the original list index value
    so the list-dictionary can be re-sorted to match the original list
    order.

    : parameters sorted_pvalues_list_dict: list-dictionary with all entries
        where the list value is the original p-value

    : return re_sorted_pvalues_list_dict: list-dictionary where the
        original the list value is the original index value and has been
        re-sorted by that value

    """

    for entry in sorted_pvalues_list_dict:

        index_value = entry[1]['index_in_list']

        entry[0] = index_value

    # Sort the list (outside value using original index value)
    re_sorted_pvalues_list_dict = sorted(sorted_pvalues_list_dict)

    return (re_sorted_pvalues_list_dict)



def fdr_correction(pvalues_list):

    """

    Function performs FDR correction of the p-values
    using Benjamini-Hochberg (1995) which sorts the list of pvalues
    and then determines the p-value correction based on the rank and following
    equation (p-value x NumbTest / p-value_Rank) and also adjusts for lower p-value 
    in succeeding adjusted p-value in list if it occurs.

    :param values: list of pvalues to correct

    :return p_value_dict: dictionary of corrected pvalues
    
    """
    
    # Create a list of pvalues with a dictionary inside each entry
    pvalues_list_dict = create_pvalues_fdr_results_dict(pvalues_list)

    # Sort the list (outside value used raw pvalue)
    sorted_pvalues_list_dict = sorted(pvalues_list_dict)
    
    #Position Movement Counter
    i=1

    total_pvalues = len(pvalues_list_dict)

    print (total_pvalues)

    # Start looping over list dictionary 
    for entry in sorted_pvalues_list_dict:

        print (i)

        if i < len(pvalues_list_dict):

            # Get corrected pvalue for position i
            adj_pvalue = round((entry[0] * total_pvalues / i), 8)
            
            # Get next pvalue in sorted list
            next_entry = sorted_pvalues_list_dict[i][0]

            # Get corrected pvalue for next entry
            next_entry_adj_pvalue = round((next_entry * total_pvalues / (i + 1)), 8)

            # Increment i value
            i+=1

            # Get the lowest possible value of the two options
            fdr_corrected_pvalue = min(adj_pvalue, next_entry_adj_pvalue)

            # Update the dictionary value with corrected pvalue
            entry[1]['corrected_pvalue'] = fdr_corrected_pvalue

        # last value in list
        else:
 
            # Get corrected pvalue for position i
            # Important: No correction occurs for position because last value in sorted list
            fdr_corrected_pvalue = round((entry[0] * total_pvalues / i), 8)

            # Update the dictionary value with corrected pvalue
            entry[1]['corrected_pvalue'] = fdr_corrected_pvalue

    # Replace first value in list with index to re-order values to match orginal data
    re_sorted_pvalues_list_dict = reorder_sorted_pvalues_list_dict(sorted_pvalues_list_dict)

    return(re_sorted_pvalues_list_dict)
    


def main():
    
    # List of pvalue used (Values come from the Benjamini-Hochberg (1995) Paper 
    pvalues_list = [0.0001, 0.0004, 0.0019, 0.0095, 0.0201, 0.0278, 0.0298, 0.0344,
          0.0459, 0.3240, 0.4262, 0.5719, 0.6528, 0.7590, 1.000]

    # Perform FDR Correction on list
    re_sorted_pvalues_list_dict = fdr_correction(pvalues_list)

    # Print FDR correction results
    for entry in re_sorted_pvalues_list_dict:
        print (str(entry[0]) + ":" + str(entry[1]['original_pvalue']) + ":" + str(entry[1]['corrected_pvalue']))

if __name__ == "__main__":
    
    main()



"""

########### BENCHMARKING PROGRAM IN R ##################

Link for R Code Source: https://stat.ethz.ch/R-manual/R-devel/library/stats/html/p.adjust.html

Below is the code to run the same analysis but in R, the results match exactly

R version 3.4.3

pvalues <- list(0.0001, 0.0004, 0.0019, 0.0095, 0.0201, 0.0278, 0.0298,
            0.0344, 0.0459, 0.3240, 0.4262, 0.5719, 0.6528, 0.7590, 1.000)
> p.adjust(pvalues, method="fdr")

Output: 
 [1] 0.00150000 0.00300000 0.00950000 0.03562500 0.06030000
 [6] 0.06385714 0.06385714 0.06450000 0.07650000 0.48600000
[11] 0.58118182 0.71487500 0.75323077 0.81321429 1.00000000

"""







